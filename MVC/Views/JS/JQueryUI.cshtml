<script src="~/Scripts/JQueryUI/jquery-ui.min.js"></script>
@*<link href="~/Scripts/JQueryUI/jquery-ui.min.css" rel="stylesheet" />*@

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
<h2>JQuery Widgets</h2>
<hr />
<h3>Accordian Widget</h3>
=======================
<br />
Convert a pair of headers and content panels into an accordion.<br />
<script>
  $( function() {
      $("#accordion").accordion(
          {
              collapsible: true,
              event: "mouseover", //Default - Click
              heightstyle:"content"
          }
          );
  } );
</script>
    <div id="accordion">
        <h3>Section 1</h3>
        <div>
            <p>
                Mauris mauris ante, blandit et, ultrices a, suscipit eget, quam. Integer
                ut neque. Vivamus nisi metus, molestie vel, gravida in, condimentum sit
                amet, nunc. Nam a nibh. Donec suscipit eros. Nam mi. Proin viverra leo ut
                odio. Curabitur malesuada. Vestibulum a velit eu ante scelerisque vulputate.
            </p>
        </div>
        <h3>Section 2</h3>
        <div>
            <p>
                Sed non urna. Donec et ante. Phasellus eu ligula. Vestibulum sit amet
                purus. Vivamus hendrerit, dolor at aliquet laoreet, mauris turpis porttitor
                velit, faucibus interdum tellus libero ac justo. Vivamus non quam. In
                suscipit faucibus urna.
            </p>
        </div>
        <h3>Section 3</h3>
        <div>
            <p>
                Nam enim risus, molestie et, porta ac, aliquam ac, risus. Quisque lobortis.
                Phasellus pellentesque purus in massa. Aenean in pede. Phasellus ac libero
                ac tellus pellentesque semper. Sed ac felis. Sed commodo, magna quis
                lacinia ornare, quam ante aliquam nisi, eu iaculis leo purus venenatis dui.
            </p>
            <ul>
                <li>List item one</li>
                <li>List item two</li>
                <li>List item three</li>
            </ul>
        </div>
        <h3>Section 4</h3>
        <div>
            <p>
                Cras dictum. Pellentesque habitant morbi tristique senectus et netus
                et malesuada fames ac turpis egestas. Vestibulum ante ipsum primis in
                faucibus orci luctus et ultrices posuere cubilia Curae; Aenean lacinia
                mauris vel est.
            </p>
        </div>
    </div>
<h3>AutoComplete</h3><br />
=====================
<br />
<h3>
    source&#xA0;
</h3>
<div class="option-type">
    <strong>Type: </strong><a href="http://api.jquery.com/Types/#Array">Array</a> or <a href="http://api.jquery.com/Types/#String">String</a> or <a href="http://api.jquery.com/Types/#Function">Function</a>( <a href="http://api.jquery.com/Types/#Object">Object</a> request, <a href="http://api.jquery.com/Types/#Function">Function</a> response( <a href="http://api.jquery.com/Types/#Object">Object</a> data ) )
</div>
<div class="default">
    <strong>Default: </strong><code>none; must be specified</code>
</div>
<div>
    Defines the data to use, must be specified.
    <p>Independent of the variant you use, the label is always treated as text. If you want the label to be treated as html you can use <a href="https://github.com/scottgonzalez/jquery-ui-extensions/blob/master/src/autocomplete/jquery.ui.autocomplete.html.js">Scott Gonz&#xE1;lez&apos; html extension</a>. The demos all focus on different variations of the <code>source</code> option - look for one that matches your use case, and check out the code.</p>
</div>
<strong>Multiple types supported:</strong>
<ul>
    <li>
        <strong>Array</strong>:
        An array can be used for local data. There are two supported formats:
        <ul>
            <li>
                An array of strings: <code>[ &quot;Choice1&quot;, &quot;Choice2&quot; ]</code>
            </li>
            <li>
                An array of objects with <code>label</code> and <code>value</code> properties: <code>[ { label: &quot;Choice1&quot;, value: &quot;value1&quot; }, ... ]</code>
            </li>
        </ul>
        The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only <code>value</code> properties, the value will also be used as the label.
    </li>
    <li>
        <strong>String</strong>: When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must provide JSONP). The Autocomplete plugin does not filter the results, instead a query string is added with a <code>term</code> field, which the server-side script should use for filtering the results. For example, if the <code>source</code> option is set to <code>&quot;http://example.com&quot;</code> and the user types <code>foo</code>, a GET request would be made to <code>http://example.com?term=foo</code>. The data itself can be in the same format as the local data described above.
    </li>
    <li>
        <strong>Function</strong>:
        The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete. The callback gets two arguments:
        <ul>
            <li>A <code>request</code> object, with a single <code>term</code> property, which refers to the value currently in the text input. For example, if the user enters <code>&quot;new yo&quot;</code> in a city field, the Autocomplete term will equal <code>&quot;new yo&quot;</code>.</li>
            <li>A <code>response</code> callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It&apos;s important when providing a custom source callback to handle errors during the request. You must always call the <code>response</code> callback even if you encounter an error. This ensures that the widget always has the correct state.</li>
        </ul>
        <p>When filtering data locally, you can make use of the built-in <code>$.ui.autocomplete.escapeRegex</code> function. It&apos;ll take a single string argument and escape all regex characters, making the result safe to pass to <code>new RegExp()</code>.</p>
    </li>
</ul>
<strong>Code examples:</strong><p>Initialize the autocomplete with the <code>source</code> option specified:</p>
<div class="syntaxhighlighter javascript">
    <table>
        <tbody>
            <tr>

                <td class="gutter">

                    <div class="line n1">1</div>

                    <div class="line n2">2</div>

                    <div class="line n3">3</div>

                </td>

                <td class="code">
                    <pre><div class="container"><div class="line"><code>$( <span class="string">&quot;.selector&quot;</span> ).autocomplete({</code></div></div><div class="container"><div class="line"><code>  source: [ <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;coldfusion&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;ruby&quot;</span> ]</code></div></div><div class="container"><div class="line"><code>});</code></div></div></pre>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<p>Get or set the <code>source</code> option, after initialization:</p>
<div class="syntaxhighlighter javascript">
    <table>
        <tbody>
            <tr>

                <td class="gutter">

                    <div class="line n1">1</div>

                    <div class="line n2">2</div>

                    <div class="line n3">3</div>

                    <div class="line n4">4</div>

                    <div class="line n5">5</div>

                </td>

                <td class="code">
                    <pre><div class="container"><div class="line"><code><span class="comment">// Getter</span></code></div></div><div class="container"><div class="line"><code><span class="keyword">var</span> source = $( <span class="string">&quot;.selector&quot;</span> ).autocomplete( <span class="string">&quot;option&quot;</span>, <span class="string">&quot;source&quot;</span> );</code></div></div><div class="container"><div class="line"><code> </code></div></div><div class="container"><div class="line"><code><span class="comment">// Setter</span></code></div></div><div class="container"><div class="line"><code>$( <span class="string">&quot;.selector&quot;</span> ).autocomplete( <span class="string">&quot;option&quot;</span>, <span class="string">&quot;source&quot;</span>, [ <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;coldfusion&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;ruby&quot;</span> ] );</code></div></div></pre>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<br />
<label for="autocomplete">Select a programming language: </label>
<input id="autocomplete">

<script>
$( "#autocomplete" ).autocomplete({
  source: [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ],
  minlength: 2,
  classes: {
      "ui-autocomplete": "highlight"
  },

});
</script>
<br />
<b>CheckBox and RadioButton Widgets</b><br />
<script>
  $( function() {
    $( "input" ).checkboxradio();
  } );
</script>
    <div class="widget">
        <h1>Checkbox and radio button widgets</h1>

        <h2>Radio Group</h2>
        <fieldset>
            <legend>Select a Location: </legend>
            <label for="radio-1">New York</label>
            <input type="radio" name="radio-1" id="radio-1">
            <label for="radio-2">Paris</label>
            <input type="radio" name="radio-1" id="radio-2">
            <label for="radio-3">London</label>
            <input type="radio" name="radio-1" id="radio-3">
        </fieldset>

        <h2>Checkbox</h2>
        <fieldset>
            <legend>Hotel Ratings: </legend>
            <label for="checkbox-1">2 Star</label>
            <input type="checkbox" name="checkbox-1" id="checkbox-1">
            <label for="checkbox-2">3 Star</label>
            <input type="checkbox" name="checkbox-2" id="checkbox-2">
            <label for="checkbox-3">4 Star</label>
            <input type="checkbox" name="checkbox-3" id="checkbox-3">
            <label for="checkbox-4">5 Star</label>
            <input type="checkbox" name="checkbox-4" id="checkbox-4">
        </fieldset>

        <h2>Checkbox nested in label</h2>
        <fieldset>
            <legend>Bed Type: </legend>
            <label for="checkbox-nested-1">
                2 Double
                <input type="checkbox" name="checkbox-nested-1" id="checkbox-nested-1">
            </label>
            <label for="checkbox-nested-2">
                2 Queen
                <input type="checkbox" name="checkbox-nested-2" id="checkbox-nested-2">
            </label>
            <label for="checkbox-nested-3">
                1 Queen
                <input type="checkbox" name="checkbox-nested-3" id="checkbox-nested-3">
            </label>
            <label for="checkbox-nested-4">
                1 King
                <input type="checkbox" name="checkbox-nested-4" id="checkbox-nested-4">
            </label>
        </fieldset>
    </div>
<br />
Refer Site
<br />

<b>DatePicker</b><br />
===================
<br />


<input type="datetime" id="dttypeid"/>
<input type="text" id="dttypetext" />
<div id="datepicker"></div>

<script>
    $("#dttypetext").datepicker(
        {
            dateFormat: "yy-mm-dd",
            changeMonth: true,
            changeYear: true,
            ConstrainInput: true,
            maxDate: -1,
            minDate: null,
            showAnim: "fadeIn",

        }
            );
</script>
<br />
<b>Dialog</b><br />
=================
<br />
<button id="opener">open the dialog</button>
<div id="dialog" title="Dialog Title">I'm a dialog</div>

<script>
$( "#dialog" ).dialog({ autoOpen: false });
$( "#opener" ).click(function() {
  $( "#dialog" ).dialog( "open" );
});
</script>


